// Use C++ highlighter.
// Will this make KWrite use a sensible highlighter?
// Yep, it does.
// KWrite is freakin' smart!

include "arrows"

mywidth	= 0.5
scale	= 0.2
fwidth	= mywidth*0.2*scale


Curve = Point
(Real r, a)@Curve[angle = 8.0*Atan[1]*$.a, $$ = $.r*Vec[angle]]

and	= Window[][
	Style[.Border[mywidth*scale, color.black]]
	Color[color.white]
	a	= 0.25
	af	= -0.25
	w	= mywidth*scale
	r	= 20*scale
	t	= .Line[w, (0, -r), (-r, -r), (-r, r), (0, r)]
	\ .Line[w, Curve[(r, a)], For[(a -= 0.01) > af], Curve[(r, af)], line.smooth]
	
	\ .Hot[	"a", t.Get[2.75], "b", t.Get[2.25], "x", (r, 0),
		"top", t.Get[(3.8, 0.4)], "bot", t.Get[(1.2, 0.4)]
	]
//	.Show[(-20, -20), (20, 20)]
]


// Draw a DFF.
dff = Window[][
	Style[.Border[mywidth*scale, color.black]]
	Color[color.white]
	t = .Poly[(-30, -45)*scale, (-30, 45)*scale, (30, 45)*scale, (30, -45)*scale]
	\ .Hot[	"d", t.Get[1.75], "q", t.Get[3.25], "c", t.Get[1.2],
		"ce", t.Get[1.5], "r", t.Get[4.5], "s", t.Get[2.5],
		"top", t.Get[(2.5, 0.3)], "bot", t.Get[(4.5, 0.3)]
		
	]
	Style[.Border[mywidth*0.5*scale, color.black]]
	c = .Poly[t.Get[(1.125, -0.0025)], t.Get[(1.275, -0.0025)], t.Get[(1.2, -0.15)]]
	
	Style[.Border[fwidth, color.black]]
	\ .Text[.Font["Helvetica", 10*scale], color.black,
		"D", t.Get[(1.75, -0.10)];
		"Q", t.Get[(3.25, -0.10)];
		"CE", t.Get[(1.5, -0.13)];
		"R", t.Get[(4.5, -0.16)];
		"S", t.Get[(2.5, -0.16)];
	]
//	.Show[(-30, -45)*scale, (30, 45)*scale]	// Not needed?
]


// Big, tall column register (DFF).
column_reg	= Window[][
	Style[.Border[mywidth*scale, color.black]]
	Color[color.grey]
	t = .Poly[(-10, -60)*scale, (-10, 60)*scale, (10, 60)*scale, (10, -60)*scale]
	\ .Hot[	"ai", t.Get[1.75], "bi", t.Get[1.5], "ci", t.Get[1.25],
		"ao", t.Get[1.75], "bo", t.Get[1.5], "co", t.Get[1.25],
		"top", t.Get[(2.5, 1)], "bot", t.Get[(4.5, 1)]
	]
	Style[.Border[mywidth*0.5*scale, color.black]]
	c = .Poly[t.Get[(1.05, -0.0025)], t.Get[(1.1, -0.0025)], t.Get[(1.075, -0.05)]]
]


// A simple box.
plain_box = Window[][
	Style[.Border[mywidth*scale, color.black]]
	Color[color.white]
	t = .Poly[(-30, -45)*scale, (-30, 45)*scale, (30, 45)*scale, (30, -45)*scale]
	\ .Hot[	"in", t.Get[1.5], "out", t.Get[3.5],
		"top", t.Get[(2.5, 0.3)], "bot", t.Get[(4.5, 0.3)]
		
	]
]


// A memory chip.
mem = Window[][
	Style[.Border[mywidth*scale, color.black]]
	Color[color.white]
	t = .Poly[(-30, -45)*scale, (-30, 45)*scale, (30, 45)*scale, (30, -45)*scale]
	Color[color.black]
	.Circle[5*scale, t.Get[1.1]; t.Get[1.3]; t.Get[1.5]; t.Get[1.7]; t.Get[1.9]]
	.Circle[5*scale, t.Get[3.1]; t.Get[3.3]; t.Get[3.5]; t.Get[3.7]; t.Get[3.9]]
	
	Style[.Border[mywidth*scale, color.black]]
	Color[color.white, .a=1.0]
	\ .Poly[t.Get[1], t.Get[2], t.Get[3], t.Get[4]]
	Color[color.white, .a=0.0]
	.Circle[t.Get[(1.85, -0.15)], 5*scale]
	
	\ .Hot[	"in", t.Get[(1.5, 0.1)], "out", t.Get[(3.5, 0.1)],
		"top", t.Get[(2.5, 0.3)], "bot", t.Get[(4.5, 0.3)]
	]
]


// Register File
rf = Window[][
	Style[.Border[mywidth*scale, color.black]]
	Color[color.white]
	t = .Poly[(-30, -45)*scale, (-30, 45)*scale, (30, 45)*scale, (30, -45)*scale]
	Style[.Border[mywidth*0.25*scale, color.black]]
	Color[color.black, .a=1.0]
	w	= mywidth*0.25*scale
	l0 = .Line[w, t.Get[(1.2, -0.05)], t.Get[(3.8, -0.05)]]
	l1 = .Line[w, t.Get[(1.4, -0.05)], t.Get[(3.6, -0.05)]]
	l2 = .Line[w, t.Get[(1.6, -0.05)], t.Get[(3.4, -0.05)]]
	l3 = .Line[w, t.Get[(1.8, -0.05)], t.Get[(3.2, -0.05)]]
	\ .Hot[	"a", t.Get[1.8], "we", t.Get[1.6], "din", t.Get[1.4], "clk", t.Get[1.2],
		"r0", t.Get[3.2], "r1", t.Get[3.4],
		"label", t.Get[(4.5, 0.3)], "top", t.Get[(2.5, 0.3)], "bot", t.Get[(4.5, 0.3)]
	]
]


// Buffer
buffer	= Window[][
	Style[.Border[mywidth*scale, color.black]]
	Color[color.white]
	t = .Poly[(-30, -30)*scale, (-30, 30)*scale, (30, 0)*scale]
	\ .Hot[	"in", t.Get[1.5], "t", t.Get[2.5],
		"out", t.Get[3], "label", t.Get[(1, 0.2)]
	]
]


// Unary function
unary	= Window[][
	Style[.Border[mywidth*scale, color.black]]
	Color[color.white]
	t = .Poly[(-30, -30)*scale, (-30, 30)*scale, (30, 0)*scale]
	\ .Hot[	"in", t.Get[1.5], "out", t.Get[3],
		"fn", t.Get[(1.5, -0.3)], "label", t.Get[(1, 0.2)]
	]
]


// Unary function
unary_r	= Window[][
	Style[.Border[mywidth*scale, color.black]]
	Color[color.white]
	t = .Poly[(30, 30)*scale, (30, -30)*scale, (-30, 0)*scale]
// 	t = .Poly[(-30, -30)*scale, (-30, 30)*scale, (30, 0)*scale]
	\ .Hot[	"in", t.Get[1.5], "out", t.Get[3],
		"fn", t.Get[(1.5, -0.3)], "label", t.Get[(1, 0.2)]
	]
]


// 2-1 Multiplexer.
mux2to1	= Window[][
	Style[.Border[mywidth*scale, color.black]]
	Color[color.white]
	t = .Poly[	(-10, -40)*scale, (-10, 40)*scale,
			(10, 25)*scale, (10, -25)*scale
	]
	\ .Hot[	"b", t.Get[1.2], "a", t.Get[1.8], "s", t.Get[2.5],
		"out", t.Get[3.5], "label", t.Get[(4.5, 1)]
	]
]


// 4-1 Multiplexer.
mux4to1	= Window[][
	Style[.Border[mywidth*scale, color.black]]
	Color[color.white]
	t = .Poly[	(-10, -40)*scale, (-10, 40)*scale,
			(10, 25)*scale, (10, -25)*scale
	]
	\ .Hot[	"d", t.Get[1.2], "c", t.Get[1.4], "b", t.Get[1.6], "a", t.Get[1.8],
		"s", t.Get[2.5], "out", t.Get[3.5], "label", t.Get[(1, 0.5)]
	]
]


// Comparator
comparator = Window[][
	Style[.Border[mywidth*scale, color.black]]
	Color[color.white]
	t = .Poly[(-40, -40)*scale, (-40, 40)*scale, (40, 0)*scale]
	Style[.Border[mywidth*0.5*scale, color.black]]
	Color[color.white, .a=0.0]
	
	\ .Hot[	"out", t.Get[3], "a", t.Get[1.3], "b", t.Get[1.7], "label", t.Get[(1, 0.5)]]
	
	Style[.Border[fwidth, color.black]]
	.Text[.Font["Helvetica", 12*scale], color.black
        "==", t.Get[(1.5, -0.3)];
	]
]


// Nodes
sig_in	= Window[][
	Style[.Border[mywidth*scale, color.black]]
	Color[color.white]
	\ .Circle[(0.0, 0.0), 5.0*scale]
	
	\ .Hot["out", (5, 0)*scale, "label", (-20, 0)*scale]
]

sig_out	= Window[][
	Style[.Border[mywidth*scale, color.black]]
	Color[color.white]
	\ .Circle[(0.0, 0.0), 5.0*scale]
	
	\ .Hot["in", (-5, 0)*scale, "label", (20, 0)*scale]
]


// ALU
alu = Window[][
	Style[.Border[mywidth*scale, color.black]]
	Color[color.white]
	t = .Poly[(-50, -80)*scale, (-50, -20)*scale, (-20, -10)*scale, (-20, 10)*scale, (-50, 20)*scale, (-50, 80)*scale, (50, 40)*scale, (50, -40)*scale]
	Style[.Border[mywidth*0.5*scale, color.black]]
	Color[color.white, .a=0.0]
	
	\ .Hot["a", t.Get[5.5], "b", t.Get[1.5], "x", t.Get[7.5]]
	
	Style[.Border[fwidth, color.black]]
	.Text[.Font["Helvetica", 12*scale], color.black
        "ALU", t.Get[(3.5, -1.3)];
	]
]


// Subtract
subtract = Window[][
	Style[.Border[mywidth*scale, color.black]]
	Color[color.white]
	sc	= scale*0.7
	t = .Poly[(-50, -80)*sc, (-50, -20)*sc, (-20, -10)*sc, (-20, 10)*sc, (-50, 20)*sc, (-50, 80)*sc, (50, 40)*sc, (50, -40)*sc]
	Style[.Border[mywidth*0.5*scale, color.black]]
	Color[color.white, .a=0.0]
	
	\ .Hot[	"a", t.Get[5.5], "b", t.Get[1.5], "x", t.Get[7.5],
		"top", t.Get[(6.4, 0.3)], "bot", t.Get[(8.6, 0.3)]
	]
	
	Style[.Border[fwidth, color.black]]
	.Text[.Font["Helvetica", 24*scale], color.black
        "-", t.Get[(3.5, -1.3)];
	]
]


// Multiplier
mult = Window[][
	Style[.Border[mywidth*scale, color.black]]
	Color[color.white]
	c = (0, 0)*scale
	t = .Circle[c, 50.0*scale]
	
	\ .Hot["top", (0, 65)*scale, "bot", (0, -65)*scale]
	
	Style[.Border[fwidth, color.black]]
	.Text[.Font["Helvetica", 16*scale], color.black
        "X", c;
	]
]


// Binary Fn
binary = Window[][
	Style[.Border[mywidth*scale, color.black]]
	Color[color.white]
	c = (0, 0)*scale
	t = .Circle[c, 50.0*scale]
	
	\ .Hot[	"top", (0, 65)*scale, "bot", (0, -65)*scale,
		"label", (0, 0)
	]
]


// Junction
junc = Window[][
	Style[.Border[mywidth*scale, color.black]]
	Color[color.black]
	t = .Circle[(0.0, 0.0), 4.0*scale]
	\ .Hot["c", (0.0, 0.0)]
]


// Bitwise complement symbol (circle).
negate	= Window[][
	Style[.Border[mywidth*scale, color.black]]
	Color[color.white]
	t	= .Circle[4*scale, (-4, 0)*scale]
	\ .Hot["l", (-8, 0)*scale, "r", (0, 0)*scale]
]


Window.ConHVH	= (Point p0, p1, p2, p3, Real w)
Real@Window.ConHVH[$$.w=$]
PointList@Window.ConHVH[
	$$.p0=$.Get[1],
	$$.p1=($.Get[1.5].x, $.Get[1].y),
	$$.p2=($.Get[1.5].x, $.Get[2].y),
	$$.p3=$.Get[2],
	l = $$$.Line[$$.w, $$.p0, $$.p1, $$.p2, $$.p3]
]

Window.ConVHV	= (Point p0, p1, p2, p3, Real w)
Real@Window.ConVHV[$$.w=$]
PointList@Window.ConVHV[
	$$.p0=$.Get[1],
	$$.p1=($.Get[1].x, $.Get[1.5].y),
	$$.p2=($.Get[2].x, $.Get[1.5].y),
	$$.p3=$.Get[2],
	l = $$$.Line[$$.w, $$.p0, $$.p1, $$.p2, $$.p3]
]

Window.ConVH	= (Point p0, p1, p2, Real w)
Real@Window.ConVH[$$.w=$]
PointList@Window.ConVH[
	$$.p0=$.Get[1],
	$$.p1=($.Get[1].x, $.Get[2].y),
	$$.p2=$.Get[2],
	l = $$$.Line[$$.w, $$.p0, $$.p1, $$.p2]
]

Window.ConHV	= (Point p0, p1, p2, Real w)
Real@Window.ConHV[$$.w=$]
PointList@Window.ConHV[
	$$.p0=$.Get[1],
	$$.p1=($.Get[2].x, $.Get[1].y),
	$$.p2=$.Get[2],
	l = $$$.Line[$$.w, $$.p0, $$.p1, $$.p2]
]


Centre	= Point
([)@Centre[$$.x=0.0, $$.y=0.0]
Point@Centre[
	$$.x	+= $.x
	$$.y	+= $.y
]
(])@Centre[$$	= $$ / 2.0]


lut4	= Window[][
	Style[.Border[mywidth*scale, color.black]]
	Color[color.white]
	off	= 25*scale
	t = .Poly[(-30, -45)*scale, (-30, 45)*scale, (30, 45)*scale, (30, -45)*scale]
	\ .Hot[	"i0", t.Get[1.8]-(off, 0), "i1", t.Get[1.6]-(off, 0),
		"i2", t.Get[1.4]-(off, 0), "i3", t.Get[1.2]-(off, 0),
		"out", t.Get[3.5]+(off, 0),
		"top", t.Get[(2.5, 0.3)], "bot", t.Get[(4.5, 0.3)]
	]
	a	= 1.2
	w	= 1*scale
	Color[color.black]
	\ .Line[w, t.Get[a], t.Get[a]-(off, 0); For[a < 1.6; a+=0.2]]
	\ .Line[t.Get[3.5], t.Get[3.5]+(off, 0)]
	
	Style[.Border[fwidth, color.black]]
	\ .Text[.Font["Helvetica", 16*scale], color.black,
		"LUT4", t.Get[(1.5, -0.3333)]
	]
]


cymux	= Window[][
	Style[.Border[mywidth*scale, color.black]]
	Color[color.white]
	t = .Poly[	(-25, -8)*scale, (-15, 8)*scale,
			(15, 8)*scale, (25, -8)*scale
	]
	\ .Hot[	"b", t.Get[4.3], "a", t.Get[4.7], "s", t.Get[1.5],
		"out", t.Get[2.5], "label", t.Get[(3.5, 1)]
	]
	
	Style[.Border[fwidth, color.black]]
	\ .Text[.Font["Helvetica", 12*scale], color.black,
		"0", t.Get[(4.7, -0.17)];
		"1", t.Get[(4.3, -0.17)];
	]
]


or	= Window[][
	Style[.Border[mywidth*scale, color.black]]
	Color[color.white]
	
	r	= 20*scale
	a0	= Asin[0.5]/(2.0*const.pi); af0	= -a0; o0	= (3*r,0)
	a1	= 0.75;	af1	= a1 + 1.0/6.0; o1	= (r,-r)
	a2	= 0.25;	af2	= a2 - 1.0/6.0; o2	= (r,r)
	w	= mywidth*scale
	a	= 0
	t	= .Line[w, Curve[(2*r, a0)]-o0, For[(a0-=0.01)>af0], Curve[(2*r, af0)]-o0,
			(-25.359*scale, -r), (-r, -r), line.smooth
	]
	t1	= .Line[w, Curve[(2*r, a1)]-o1, For[(a1+=0.01)<af1], Curve[(2*r, af1)]-o1,
			line.smooth
	]
	t2	= .Line[w, Curve[(2*r, a2)]-o2, For[(a2-=0.01)>af2], Curve[(2*r, af2)]-o2,
			line.smooth
	]
	t3	= .Line[w, t2.Get[1], t.Get[1], line.smooth]
	
	\ .Hot[	"a", t.Get[5], "b", t.Get[13], "x", t2.Get[0],
		"top", t.Get[(3.8, 0.4)], "bot", t.Get[(1.2, 0.4)]
	]
]


xor	= Window[][
	Style[.Border[mywidth*scale, color.black]]
	Color[color.white]
	
	r	= 20*scale
	a0	= Asin[0.5]/(2.0*const.pi); af0	= -a0; o0	= (3*r,0)
	a1	= 0.75;	af1	= a1 + 1.0/6.0; o1	= (r,-r)
	a2	= 0.25;	af2	= a2 - 1.0/6.0; o2	= (r,r)
	a4	= a0;	af4	= af0;	o4	= (3.25*r, 0)
	
	w	= mywidth*scale
	a	= 0
	t	= .Line[w, Curve[(2*r, a0)]-o0, For[(a0-=0.01)>af0], Curve[(2*r, af0)]-o0,
			(-25.359*scale, -r), (-r, -r), line.smooth
	]
	t1	= .Line[w, Curve[(2*r, a1)]-o1, For[(a1+=0.01)<af1], Curve[(2*r, af1)]-o1,
			line.smooth
	]
	t2	= .Line[w, Curve[(2*r, a2)]-o2, For[(a2-=0.01)>af2], Curve[(2*r, af2)]-o2,
			line.smooth
	]
	t3	= .Line[w, t2.Get[1], t.Get[1], line.smooth]
	t4	= .Line[w, Curve[(2*r, a4)]-o4, For[(a4-=0.01)>af4], Curve[(2*r, af4)]-o4,
			line.smooth
	]
	
	\ .Hot[	"a", t4.Get[5], "b", t4.Get[13], "x", t2.Get[0],
		"top", t.Get[(3.8, 0.4)], "bot", t.Get[(1.2, 0.4)]
	]
]


// Xilinx dual-port block RAM.
bram	= Window[][
	// Border
	dx	= 150*scale;	dy	= 250*scale;
	bx	= PointList[(-dx/2, 0), (dx/2, 0)]
	by	= PointList[(0, -dy/2), (0, dy/2)]
	bb	= PointList[(-dx/2, -dy/2), (-dx/2, dy/2), (dx/2, dy/2), (dx/2, -dy/2)]
	cd	= 0.05;	// Corner depth
	ch	= 0.05*(dy/dx)
	
	Style[.Border[mywidth*scale, color.black]]
	Color[color.white]
	t	= .Poly[
			bb.Get[1+cd], bb.Get[1.5-cd/2], bb.Get[(1.5-cd/2, -cd)],
			bb.Get[(1.5+cd/2, -cd)], bb.Get[1.5+cd/2], bb.Get[2-cd],
			bb.Get[(2-cd, -cd)], bb.Get[2+ch], bb.Get[3-ch],
			bb.Get[(3-ch, -ch)], bb.Get[3+cd], bb.Get[3.5-cd/2],
			bb.Get[(3.5-cd/2, -cd)], bb.Get[(3.5+cd/2, -cd)], bb.Get[3.5+cd/2],
			bb.Get[4-cd], bb.Get[(4-cd, -cd)], bb.Get[4+ch, -ch],
			bb.Get[5-ch], bb.Get[(5-ch, -ch)]
	]
	
	\ .Hot[	"addra", bb.Get[1.9], "dia", bb.Get[1.8], "wea", bb.Get[1.7],
		"clka", bb.Get[1.6], "doa", bb.Get[3.2], "addrb", bb.Get[1.4],
		"dib", bb.Get[1.3], "web", bb.Get[1.27], "clkb", bb.Get[1.1],
		"dob", bb.Get[3.7],
		"top", bb.Get[(2.5, 0.1)], "bot", bb.Get[(4.5, 0.1)]
	]
	
	Style[.Border[fwidth, color.black]]
	\ .Text[.Font["Helvetica", 10*scale], color.black,
		"ADDRA", bb.Get[(1.9, -0.10)];
		"DIA", bb.Get[(1.8, -0.06)];
		"WEA", bb.Get[(1.7, -0.07)];
		"CLKA", bb.Get[(1.6, -0.08)];
		"DOA", bb.Get[(3.2, -0.06)];
		"ADDRB", bb.Get[(1.4, -0.10)];
		"DIB", bb.Get[(1.3, -0.06)];
		"WEB", bb.Get[(1.2, -0.07)];
		"CLKB", bb.Get[(1.1, -0.08)];
		"DOB", bb.Get[(3.7, -0.06)];
	]
]


pcb_comp	= Window[][
	dx	= 100;	dy	= 40;
	bx	= PointList[(-dx/2, 0), (dx/2, 0)]
	by	= PointList[(0, -dy/2), (0, dy/2)]
	bb	= PointList[(-dx/2, -dy/2), (-dx/2, dy/2), (dx/2, dy/2), (dx/2, -dy/2)]
	
	Style[.Border[mywidth*scale, color.black]]
	Color[color.grey]
	l2h	= 0.05
	t	= .Poly[bx.Get[(1.05, l2h)], bx.Get[(1.45, l2h)],
			bx.Get[(1.45, -l2h)], bx.Get[(1.05, -l2h)]
	]
	
	\ .Show[bb.Get[1], bb.Get[3]]
]


fpga	= Window[][
	Style[.Border[mywidth*scale, color.black]]
	Color[color.white]
	t	= .Poly[(-20,0),(0,20),(20,0),(0,-20)]
]

freega_simple	= Window[][
	dx	= 120;	dy	= 100;
	bx	= PointList[(-dx/2, 0), (dx/2, 0)]
	by	= PointList[(0, -dy/2), (0, dy/2)]
	bb	= PointList[(-dx/2, -dy/2), (-dx/2, dy/2), (dx/2, dy/2), (dx/2, -dy/2)]
	
	// PCB
	Style[.Border[mywidth*scale, color.black]]
	Color[color.green]
	t	= .Poly[bb.Get[1], bb.Get[2], bb.Get[3], bb.Get[4], bb.Get[4.45],
			bb.Get[(4.45, -0.083)], bb.Get[(4.47, -0.083)], bb.Get[4.47],
			bb.Get[4.65], bb.Get[(4.65, -0.083)], bb.Get[(4.85, -0.083)],
			bb.Get[(4.85, 0)]
	]
	
	// PCI Fingers
	// TODO: Use recursion?
	Style[.Border[mywidth*scale, color.black]]
	Color[color.white]
	w	= mywidth*scale
	
	a	= 0.0
	da	= 2.0
	ox	= bx.Get[1.2].x
	oy	= by.Get[1.5].y
	\ .Line[color.green, (ox+a, oy-2*da), (ox+a+da, oy+2*da), color.black, (ox+a, oy-2*da)
		For[(a+=da) < 12.0], line.sharp]
	
// 	finger	= Window[][
// 		\.Line[w, (0, -5), (0, 5)]
// 	]
// 	a	= 0.0
// 	ii	= 0
// 	\ .Put[finger, (-30+ii, 0), For[(ii+=1) <= 10]]
// 	\ .Line[w, (a, a*a), For[(a+=0.1) <= 5.0], (a, a*a)]
// 	
	// FPGA
//	\ .Put[fpga, (6, 4)]
	
	// Connectors
	
	// Support ICs
	
	\ .Show[bb.Get[1], bb.Get[3]]
]


GUI[freega_simple]
